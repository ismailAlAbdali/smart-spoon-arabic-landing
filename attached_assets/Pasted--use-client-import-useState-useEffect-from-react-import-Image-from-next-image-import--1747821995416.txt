"use client"

import { useState, useEffect } from "react"
import Image from "next/image"
import { motion } from "framer-motion"
import { X, ChevronLeft, ChevronRight, Info } from "lucide-react"
import { cn } from "@/lib/utils"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import type { MealData } from "@/types/meal"
import { meals } from "@/data/meals"

export default function MealGallery() {
  const [selectedMeal, setSelectedMeal] = useState<MealData | null>(null)
  const [showInfo, setShowInfo] = useState(false)
  const [activeCategory, setActiveCategory] = useState("all")

  const ITEMS_PER_PAGE = 12
  const [currentPage, setCurrentPage] = useState(1)

  const categories = ["all", ...Array.from(new Set(meals.map((meal) => meal.category)))]
  const categoryNames: Record<string, string> = {
    all: "الكل",
    "أطباق رئيسية": "أطباق رئيسية",
    "أطباق بحرية": "أطباق بحرية",
    مقبلات: "مقبلات",
    سلطات: "سلطات",
    حلويات: "حلويات",
    فطور: "فطور",
    مشاوي: "مشاوي",
    ساندويشات: "ساندويشات",
    معجنات: "معجنات",
    مشروبات: "مشروبات",
  }

  const filteredMeals = activeCategory === "all" ? meals : meals.filter((meal) => meal.category === activeCategory)
  const totalPages = Math.ceil(filteredMeals.length / ITEMS_PER_PAGE)
  const paginatedMeals = filteredMeals.slice((currentPage - 1) * ITEMS_PER_PAGE, currentPage * ITEMS_PER_PAGE)

  const handleMealClick = (meal: MealData) => {
    setSelectedMeal(meal)
    setShowInfo(false)
  }

  const handlePrevious = () => {
    if (!selectedMeal) return
    const currentIndex = filteredMeals.findIndex((meal) => meal.id === selectedMeal.id)
    const previousIndex = (currentIndex - 1 + filteredMeals.length) % filteredMeals.length
    setSelectedMeal(filteredMeals[previousIndex])
    setShowInfo(false)
  }

  const handleNext = () => {
    if (!selectedMeal) return
    const currentIndex = filteredMeals.findIndex((meal) => meal.id === selectedMeal.id)
    const nextIndex = (currentIndex + 1) % filteredMeals.length
    setSelectedMeal(filteredMeals[nextIndex])
    setShowInfo(false)
  }

  const handleClose = () => {
    setSelectedMeal(null)
    setShowInfo(false)
  }

  const toggleInfo = () => {
    setShowInfo(!showInfo)
  }

  useEffect(() => {
    setCurrentPage(1)
  }, [activeCategory])

  return (
    <div className="container mx-auto px-4 py-12" dir="rtl">
      <div className="mb-8 text-center">
        <h2 className="text-3xl font-bold mb-2">أطباقنا العربية الشهية</h2>
        <p className="text-muted-foreground max-w-2xl mx-auto">
          استكشف مأكولاتنا العربية الأصيلة، المحضرة بمكونات طازجة ووصفات تقليدية لتجربة صحية ولذيذة
        </p>
      </div>

      <Tabs defaultValue="all" className="mb-8" onValueChange={setActiveCategory}>
        <div className="flex justify-center mb-4">
          <TabsList className="grid grid-cols-2 md:grid-cols-5 gap-2">
            {categories.map((category) => (
              <TabsTrigger key={category} value={category} className="capitalize">
                {categoryNames[category]}
              </TabsTrigger>
            ))}
          </TabsList>
        </div>

        {categories.map((category) => (
          <TabsContent key={category} value={category} className="mt-0">
            <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6 gap-4">
              {paginatedMeals.map((meal) => (
                <motion.div
                  key={meal.id}
                  layoutId={`meal-${meal.id}`}
                  className="relative group cursor-pointer rounded-lg overflow-hidden shadow-md hover:shadow-lg transition-all duration-300"
                  onClick={() => handleMealClick(meal)}
                  whileHover={{ y: -5 }}
                >
                  <div className="aspect-square relative">
                    <Image
                      src={meal.imageUrl || "/placeholder.svg"}
                      alt={meal.name}
                      fill
                      sizes="(max-width: 640px) 50vw, (max-width: 768px) 33vw, (max-width: 1024px) 25vw, 16vw"
                      className="object-cover transition-transform duration-500 group-hover:scale-105"
                    />
                    <div className="absolute inset-0 bg-gradient-to-t from-black/70 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex flex-col justify-end p-4">
                      <h3 className="text-white font-semibold text-sm md:text-base">{meal.name}</h3>
                      <div className="flex flex-wrap gap-1 mt-1">
                        {meal.tags.map((tag) => (
                          <Badge key={tag} variant="secondary" className="text-xs">
                            {tag}
                          </Badge>
                        ))}
                      </div>
                    </div>
                  </div>
                </motion.div>
              ))}
            </div>
            {filteredMeals.length > ITEMS_PER_PAGE && (
              <div className="flex justify-center items-center mt-8 gap-2">
                <Button
                  variant="outline"
                  size="icon"
                  onClick={() => setCurrentPage((prev) => Math.min(prev + 1, totalPages))}
                  disabled={currentPage === totalPages}
                >
                  <ChevronLeft className="h-4 w-4" />
                </Button>
                <div className="flex items-center gap-1">
                  {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (
                    <Button
                      key={page}
                      variant={currentPage === page ? "default" : "outline"}
                      size="icon"
                      className="w-8 h-8"
                      onClick={() => setCurrentPage(page)}
                    >
                      {page}
                    </Button>
                  ))}
                </div>
                <Button
                  variant="outline"
                  size="icon"
                  onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 1))}
                  disabled={currentPage === 1}
                >
                  <ChevronRight className="h-4 w-4" />
                </Button>
              </div>
            )}
          </TabsContent>
        ))}
      </Tabs>

      {selectedMeal && (
        <div className="fixed inset-0 bg-black/80 z-50 flex items-center justify-center p-4">
          <div className="relative w-full max-w-4xl bg-background rounded-lg overflow-hidden">
            <Button
              variant="ghost"
              size="icon"
              className="absolute left-2 top-2 z-10 bg-black/20 hover:bg-black/40 text-white rounded-full"
              onClick={handleClose}
            >
              <X className="h-5 w-5" />
              <span className="sr-only">إغلاق</span>
            </Button>

            <Button
              variant="ghost"
              size="icon"
              className="absolute left-14 top-2 z-10 bg-black/20 hover:bg-black/40 text-white rounded-full"
              onClick={toggleInfo}
            >
              <Info className="h-5 w-5" />
              <span className="sr-only">معلومات</span>
            </Button>

            <div className="flex flex-col md:flex-row h-full">
              <div
                className={cn(
                  "relative w-full md:w-3/5 transition-all duration-300",
                  showInfo ? "md:w-2/5" : "md:w-3/5",
                )}
              >
                <div className="aspect-square md:aspect-auto md:h-[70vh] relative">
                  <Image
                    src={selectedMeal.imageUrl || "/placeholder.svg"}
                    alt={selectedMeal.name}
                    fill
                    sizes="(max-width: 768px) 100vw, 60vw"
                    className="object-cover"
                    priority
                  />
                </div>

                <Button
                  variant="ghost"
                  size="icon"
                  className="absolute right-2 top-1/2 -translate-y-1/2 z-10 bg-black/20 hover:bg-black/40 text-white rounded-full"
                  onClick={handlePrevious}
                >
                  <ChevronRight className="h-6 w-6" />
                  <span className="sr-only">السابق</span>
                </Button>

                <Button
                  variant="ghost"
                  size="icon"
                  className="absolute left-2 top-1/2 -translate-y-1/2 z-10 bg-black/20 hover:bg-black/40 text-white rounded-full"
                  onClick={handleNext}
                >
                  <ChevronLeft className="h-6 w-6" />
                  <span className="sr-only">التالي</span>
                </Button>
              </div>

              <div
                className={cn("p-6 w-full md:w-2/5 transition-all duration-300", showInfo ? "md:w-3/5" : "md:w-2/5")}
              >
                <h2 className="text-2xl font-bold mb-2">{selectedMeal.name}</h2>
                <p className="text-muted-foreground mb-4">{selectedMeal.description}</p>

                <div className="flex flex-wrap gap-1 mb-4">
                  {selectedMeal.tags.map((tag) => (
                    <Badge key={tag} variant="outline" className="capitalize">
                      {tag}
                    </Badge>
                  ))}
                </div>

                {showInfo && (
                  <div className="mt-4 space-y-4">
                    <div>
                      <h3 className="text-lg font-semibold mb-2">المكونات</h3>
                      <ul className="list-disc pr-5 space-y-1">
                        {selectedMeal.ingredients.map((ingredient, index) => (
                          <li key={index}>{ingredient}</li>
                        ))}
                      </ul>
                    </div>

                    <div>
                      <h3 className="text-lg font-semibold mb-2">القيمة الغذائية</h3>
                      <div className="grid grid-cols-2 gap-2">
                        <div className="bg-muted p-2 rounded">
                          <span className="text-sm font-medium">سعرات حرارية</span>
                          <p className="text-lg">{selectedMeal.nutrition.calories} كالوري</p>
                        </div>
                        <div className="bg-muted p-2 rounded">
                          <span className="text-sm font-medium">بروتين</span>
                          <p className="text-lg">{selectedMeal.nutrition.protein} جرام</p>
                        </div>
                        <div className="bg-muted p-2 rounded">
                          <span className="text-sm font-medium">كربوهيدرات</span>
                          <p className="text-lg">{selectedMeal.nutrition.carbs} جرام</p>
                        </div>
                        <div className="bg-muted p-2 rounded">
                          <span className="text-sm font-medium">دهون</span>
                          <p className="text-lg">{selectedMeal.nutrition.fat} جرام</p>
                        </div>
                      </div>
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}
